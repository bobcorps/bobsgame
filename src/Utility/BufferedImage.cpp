#include "stdafx.h"

//------------------------------------------------------------------------------
//Copyright Robert Pelloni.
//All Rights Reserved.
//------------------------------------------------------------------------------


//#pragma once




//Logger BufferedImage::log = Logger("BufferedImage");

//=========================================================================================================================
BufferedImage::BufferedImage()
{//=========================================================================================================================

}

//=========================================================================================================================
BufferedImage::BufferedImage(u8* rgbadata, int w, int h)
{//=========================================================================================================================
	this->rgbadata = rgbadata;
	this->w = w;
	this->h = h;
}

//=========================================================================================================================
BufferedImage::BufferedImage(int w, int h)
{//=========================================================================================================================
	this->rgbadata = new u8[w*h*4];
	this->w = w;
	this->h = h;

	for (int i = 0; i < w*h * 4; i++)rgbadata[i] = 0;
}

//=========================================================================================================================
void BufferedImage::setRGB(int x, int y, int rgb)
{//=========================================================================================================================

	u8 r = (rgb >> 24) & 0xFF;
	u8 g = (rgb >> 16) & 0xFF;
	u8 b = (rgb >> 8) & 0xFF;
	u8 a = (rgb >> 0) & 0xFF;

	this->rgbadata[y*w*4+x*4+0] = r;
	this->rgbadata[y*w*4+x*4+1] = g;
	this->rgbadata[y*w*4+x*4+2] = b;
	this->rgbadata[y*w*4+x*4+3] = a;
}

//=========================================================================================================================
int BufferedImage::getRGBA(int x, int y)
{//=========================================================================================================================

	u8 r = this->rgbadata[y*w*4 + x*4 + 0];
	u8 g = this->rgbadata[y*w*4 + x*4 + 1];
	u8 b = this->rgbadata[y*w*4 + x*4 + 2];
	u8 a = this->rgbadata[y*w*4 + x*4 + 3];
	return (r << 24) + (g << 16) + (b << 8) + a;
}

//=========================================================================================================================
u8* BufferedImage::getData()
{//=========================================================================================================================
	return rgbadata;
}

//=========================================================================================================================
void BufferedImage::setColor(sp<OKColor> c)
{//=========================================================================================================================
	currentFillColor = c;
}

//=========================================================================================================================
void BufferedImage::fillRect(int x, int y, int w, int h)
{//=========================================================================================================================
	if(currentFillColor!=nullptr)
	{
		int rgb = currentFillColor->getRGBA();
		for(int xx = x; xx<x+w; xx++)
		for(int yy = y; yy<y+h; yy++)
		{
			setRGB(xx, yy, rgb);
		}
	}
}


//=========================================================================================================================
int BufferedImage::getWidth()
{//=========================================================================================================================
	return w;
}

//=========================================================================================================================
int BufferedImage::getHeight()
{//=========================================================================================================================
	return h;
}

