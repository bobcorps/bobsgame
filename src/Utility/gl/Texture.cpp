#include "stdafx.h"

//#pragma once




//Logger Texture::log = Logger("Texture");

shared_ptr<OKTexture >OKTexture::lastBoundTexture = nullptr;

//=========================================================================================================================
shared_ptr<OKTexture >OKTexture::getLastBoundTexture()
{//=========================================================================================================================
	return lastBoundTexture;
}


//=========================================================================================================================
OKTexture::OKTexture(const string &cacheName, GLuint textureID)
{//=========================================================================================================================
	this->glTargetType = GL_TEXTURE_2D;
	this->cacheName = cacheName;
	this->textureID = textureID;
	lastBoundTexture = this;
}



//=========================================================================================================================
bool OKTexture::hasAlpha()
{//=========================================================================================================================
	return alpha;
}



//=========================================================================================================================
void OKTexture::setAlpha(bool alpha)
{//=========================================================================================================================
	this->alpha = alpha;
}

//=========================================================================================================================
void OKTexture::bindNone()
{//=========================================================================================================================

	lastBoundTexture = nullptr;
	glDisable(GL_TEXTURE_2D);
}

//=========================================================================================================================
void OKTexture::unbind()
{//=========================================================================================================================

	lastBoundTexture = nullptr;
}

//=========================================================================================================================
void OKTexture::bind()
{//=========================================================================================================================
	if (lastBoundTexture != this)
	{
		lastBoundTexture = this;
		glEnable(GL_TEXTURE_2D);
		glBindTexture(glTargetType, textureID);
	}
}

//=========================================================================================================================
void OKTexture::setImageHeight(int imageHeight)
{//=========================================================================================================================
	this->imageHeight = imageHeight;
	setHeightRatio();
}

//=========================================================================================================================
void OKTexture::setImageWidth(int imageWidth)
{//=========================================================================================================================
	this->imageWidth = imageWidth;
	setWidthRatio();
}

//=========================================================================================================================
int OKTexture::getImageHeight()
{//=========================================================================================================================
	return imageHeight;
}

//=========================================================================================================================
int OKTexture::getImageWidth()
{//=========================================================================================================================
	return imageWidth;
}

//=========================================================================================================================
float OKTexture::getHeightRatio()
{//=========================================================================================================================
	return heightRatio;
}

//=========================================================================================================================
float OKTexture::getWidthRatio()
{//=========================================================================================================================
	return widthRatio;
}

//=========================================================================================================================
int OKTexture::getTextureHeight()
{//=========================================================================================================================
	return texHeight;
}

//=========================================================================================================================
int OKTexture::getTextureWidth()
{//=========================================================================================================================
	return texWidth;
}

//=========================================================================================================================
void OKTexture::setTextureHeight(int texHeight)
{//=========================================================================================================================
	this->texHeight = texHeight;
	setHeightRatio();
}

//=========================================================================================================================
void OKTexture::setTextureWidth(int texWidth)
{//=========================================================================================================================
	this->texWidth = texWidth;
	setWidthRatio();
}

//=========================================================================================================================
void OKTexture::setHeightRatio()
{//=========================================================================================================================
	if (texHeight != 0)
	{
		heightRatio = (static_cast<float>(imageHeight)) / texHeight;
	}
}


//=========================================================================================================================
void OKTexture::setWidthRatio()
{//=========================================================================================================================
	if (texWidth != 0)
	{
		widthRatio = (static_cast<float>(imageWidth)) / texWidth;
	}
}

//=========================================================================================================================
void OKTexture::release()
{//=========================================================================================================================


	shared_ptr<GLuint >textureIDs = make_shared<GLuint>[1];
	textureIDs[0] = textureID;

	glDeleteTextures(1, textureIDs);

	delete[] textureIDs;

	if (lastBoundTexture == this)
	{
		bindNone();
	}

	if (cacheName != "")
	{
		GLUtils::clearCache(cacheName);
	}


	GLUtils::texturesLoaded--;
	GLUtils::textureBytesLoaded -= (getTextureWidth() * getTextureHeight() * 4);


}

//=========================================================================================================================
GLuint OKTexture::getTextureID()
{//=========================================================================================================================
	return textureID;
}

//=========================================================================================================================
void OKTexture::setTextureID(GLuint textureID)
{//=========================================================================================================================
	this->textureID = textureID;
}

//=========================================================================================================================
shared_ptr<ByteArray> OKTexture::getTextureData()
{//=========================================================================================================================
	shared_ptr<ByteArray >buffer = make_shared<ByteArray>((hasAlpha() ? 4 : 3) * texWidth * texHeight);
	bind();
	glGetTexImage(GL_TEXTURE_2D, 0, hasAlpha() ? GL_RGBA : GL_RGB, GL_UNSIGNED_BYTE, buffer->data());


	return buffer;
}
